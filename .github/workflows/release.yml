name: Release virust-splicing (multi-binary)

on:
  push:
    tags:
      - "v*"

jobs:
  build:
    name: Build ${{ matrix.target }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ext: tar.gz
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            ext: tar.gz
          - os: macos-latest
            target: x86_64-apple-darwin
            ext: tar.gz
          - os: macos-latest
            target: aarch64-apple-darwin
            ext: tar.gz
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ext: zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable

      - name: Install cross for ARM
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: cargo install cross

      - name: Build all binaries
        run: |
          if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
            cross build --release --target ${{ matrix.target }} --bins
          else
            cargo build --release --target ${{ matrix.target }} --bins
          fi

      - name: Package all binaries
        shell: bash
        run: |
          TARGET_DIR="target/${{ matrix.target }}/release"
          RELEASE_NAME="virust-splicing-${{ github.ref_name }}-${{ matrix.target }}"
          mkdir -p dist

          # Gather all binaries (files with no extension, or .exe on Windows)
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp "$TARGET_DIR"/*.exe dist/
            powershell Compress-Archive dist "${RELEASE_NAME}.zip"
          else
            cp "$TARGET_DIR"/* dist/
            tar czf "${RELEASE_NAME}.tar.gz" -C dist .
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target }}
          path: "*.tar.gz,*.zip"

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
